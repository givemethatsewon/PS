#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct treeNode {
	char val;
	struct treeNode* left;
	struct treeNode* right;
} treeNode;

treeNode* nodeArr[26] = { NULL };
int count = 0;

treeNode* createTreeNode(char val) {
	treeNode* newNode = (treeNode*)malloc(sizeof(treeNode));
	newNode->val = val;
	newNode->left = NULL;
	newNode->right = NULL;

	return newNode;
}

void connectTreeNode(treeNode* root, char left, char right) {
	if (left != '.') {
		treeNode* leftNode = createTreeNode(left);
		root->left = leftNode;
		nodeArr[count++] = leftNode;
	}
	if (right != '.') {
		treeNode* rightNode = createTreeNode(right);
		root->right= rightNode;
		nodeArr[count++] = rightNode;
	}
}
// preorder 순회
void preorder(treeNode* root) {
	if (root) {
		printf("%c", root->val);
		preorder(root->left);
		preorder(root->right);
	}
}
// inorder 순회
void inorder(treeNode* root) {
	if (root) {
		inorder(root->left);
		printf("%c", root->val);
		inorder(root->right);
	}
}
// postorder 순회
void postorder(treeNode* root) {
	if (root) {
		postorder(root->left);
		postorder(root->right);
		printf("%c", root->val);
	}
}

int main(void) {
	int n;
	scanf("%d", &n);
	getchar();
	char first, second, third;
	treeNode* rootNode = NULL;


	// 트리 생성
	for (int i = 0; i < n; i++) {
		scanf("%c %c %c", &first, &second, &third);
		getchar();
		
		// 첫 루트 노트는 따로 저장
		if (i == 0) {
			rootNode = createTreeNode(first);
			nodeArr[count++] = rootNode;
			connectTreeNode(rootNode, second, third);
		} 
		else // 두 번쨰 줄 부터 별도로 처리
		{ 
			for (int j = 0; j < count + 1; j++) {
				if (nodeArr[j]->val == first) {
					connectTreeNode(nodeArr[j], second, third);
					break;
				}
			}
		}
	}

	// 트리 순회 및 출력	
	preorder(rootNode);
	printf("\n");
	inorder(rootNode);
	printf("\n");
	postorder(rootNode);

	for (int i = 0; i < count; i++) {
		free(nodeArr[i]);
	}
}
